[INFO   ] | 2020-08-07 11:12:27,331 | [root] start (Client:63) - v0.3.7
[DEBUG  ] | 2020-08-07 11:12:27,331 | [root] start (Client:64) - 
### Configuration - from Conf: 
	{ version : 0.3.7 }
	{ app_name : MulticlassClassifier }
	{ tmp : /Volumes/Ramdisk/ }
	{ debug : True }
	{ dataset.train : C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\dataset\training_set.csv }
	{ dataset.test_ratio : 0.2 }
	{ rng.seed : 43531 }
	{ pair_plot.compute : False }
	{ pair_plot.save : False }
	{ jobs : 12 }
	{ classifier.dump : True }
	{ benchmark.best_found : (0.8444, 'Multi-Layer Perceptron') }
	{ benchmark.threshold : (0.8906, '04/09/2020') }
	{ dataset.test :  }
[INFO   ] | 2020-08-07 11:12:27,331 | [root] start (Client:67) - [BENCHMARK] Current best value found for Multi-Layer Perceptron classifier, with F1-score: 0.8444.
[INFO   ] | 2020-08-07 11:12:27,331 | [root] start (Client:71) - [BENCHMARK] Current threshold with F1-score: 0.8906 (deadline on 04/09/2020).
[DEBUG  ] | 2020-08-07 11:12:27,374 | [mcc] prepare (MulticlassClassifier:86) - [LIB VERSION] numpy : 1.19.1
[DEBUG  ] | 2020-08-07 11:12:27,375 | [mcc] prepare (MulticlassClassifier:87) - [LIB VERSION] pandas : 1.1.0
[DEBUG  ] | 2020-08-07 11:12:27,375 | [mcc] prepare (MulticlassClassifier:88) - [LIB VERSION] matplotlib : 3.3.0
[DEBUG  ] | 2020-08-07 11:12:27,375 | [mcc] prepare (MulticlassClassifier:89) - [LIB VERSION] sklearn : 0.23.1
[DEBUG  ] | 2020-08-07 11:12:27,375 | [mcc] prepare (MulticlassClassifier:90) - [LIB VERSION] imblearn : 0.7.0
[DEBUG  ] | 2020-08-07 11:12:27,375 | [mcc] prepare (MulticlassClassifier:91) - [LIB VERSION] scipy : 1.5.2
[INFO   ] | 2020-08-07 11:12:27,375 | [mcc] prepare (MulticlassClassifier:94) - [MODE] Finding best classifier on data set (MulticlassClassifier)
[DEBUG  ] | 2020-08-07 11:12:27,434 | [mcc] prepare (MulticlassClassifier:97) - [DESCRIPTION] Dataset description:
                F1           F2  ...          F20        CLASS
count  7994.000000  7994.000000  ...  7997.000000  8000.000000
mean     -0.013077    -0.261413  ...    -0.355555     1.463375
std       1.006235     1.852793  ...     1.794666     1.231198
min      -4.181155    -6.980290  ...    -7.563245     0.000000
25%      -0.698506    -1.441144  ...    -1.563262     0.000000
50%      -0.028194    -0.261095  ...    -0.373514     2.000000
75%       0.666096     0.944857  ...     0.825741     3.000000
max       3.774161     7.155359  ...     6.774458     3.000000

[8 rows x 21 columns]
[DEBUG  ] | 2020-08-07 11:12:27,436 | [mcc] prepare (MulticlassClassifier:105) - [DESCRIPTION] Class percentage in dataset :
	C1: 33.67 %
	C2: 15.99 %
	C3: 20.66 %
	C4: 29.68 %
[INFO   ] | 2020-08-07 11:12:27,436 | [mcc] split (MulticlassClassifier:132) - [DATA SPLIT] Splitting dataset into training and test set with ratio: 0.2
[INFO   ] | 2020-08-07 11:12:27,441 | [mcc] manage_bad_values (MulticlassClassifier:155) - [MISSING DATA] Managing missing data
[DEBUG  ] | 2020-08-07 11:12:27,442 | [mcc] manage_bad_values (MulticlassClassifier:157) - [MISSING DATA] Training set x before processing (shape: (6400, 20)):
F1     5
F2     5
F3     1
F4     0
F5     3
F6     5
F7     4
F8     9
F9     4
F10    4
F11    4
F12    4
F13    3
F14    8
F15    2
F16    6
F17    4
F18    6
F19    5
F20    2
dtype: int64
[DEBUG  ] | 2020-08-07 11:12:27,443 | [mcc] manage_bad_values (MulticlassClassifier:161) - [MISSING DATA] Test set x before processing (shape: (1600, 20)):
F1     1
F2     1
F3     0
F4     1
F5     1
F6     1
F7     0
F8     0
F9     2
F10    2
F11    1
F12    2
F13    0
F14    2
F15    0
F16    0
F17    0
F18    1
F19    0
F20    1
dtype: int64
[DEBUG  ] | 2020-08-07 11:12:27,454 | [mcc] manage_bad_values (MulticlassClassifier:175) - [MISSING DATA] Training set x after processing (shape: (6400, 20)):
F1     0
F2     0
F3     0
F4     0
F5     0
F6     0
F7     0
F8     0
F9     0
F10    0
F11    0
F12    0
F13    0
F14    0
F15    0
F16    0
F17    0
F18    0
F19    0
F20    0
dtype: int64
[DEBUG  ] | 2020-08-07 11:12:27,455 | [mcc] manage_bad_values (MulticlassClassifier:179) - [MISSING DATA] Test set x after processing (shape: (1600, 20)):
F1     0
F2     0
F3     0
F4     0
F5     0
F6     0
F7     0
F8     0
F9     0
F10    0
F11    0
F12    0
F13    0
F14    0
F15    0
F16    0
F17    0
F18    0
F19    0
F20    0
dtype: int64
[INFO   ] | 2020-08-07 11:12:27,455 | [mcc] manage_bad_values (MulticlassClassifier:189) - [OUTLIER] Managing outliers using modified z-score method
[DEBUG  ] | 2020-08-07 11:12:27,502 | [mcc] manage_bad_values (MulticlassClassifier:191) - [DESCRIPTION] Training set x description before manage outlier:
                F1           F2  ...          F19          F20
count  6400.000000  6400.000000  ...  6400.000000  6400.000000
mean     -0.016422    -0.272141  ...     0.002108    -0.349239
std       1.007336     1.856364  ...     0.997279     1.794146
min      -4.181155    -6.980290  ...    -3.854103    -7.563245
25%      -0.706740    -1.446657  ...    -0.664509    -1.552750
50%      -0.030842    -0.265420  ...    -0.010748    -0.359182
75%       0.664343     0.918865  ...     0.672995     0.828487
max       3.774161     7.155359  ...     3.606960     6.774458

[8 rows x 20 columns]
[DEBUG  ] | 2020-08-07 11:12:27,831 | [mcc] manage_bad_values (MulticlassClassifier:203) - [DESCRIPTION] Training set x description after manage outlier:
                F1           F2  ...          F19          F20
count  6400.000000  6400.000000  ...  6400.000000  6400.000000
mean     -0.017525    -0.271383  ...     0.002736    -0.350192
std       1.002755     1.835655  ...     0.991934     1.776129
min      -3.508639    -6.343826  ...    -3.229380    -5.999590
25%      -0.706491    -1.442337  ...    -0.662566    -1.548472
50%      -0.030842    -0.265420  ...    -0.010748    -0.359182
75%       0.659591     0.916347  ...     0.670954     0.824141
max       3.471496     5.835273  ...     3.291693     5.623552

[8 rows x 20 columns]
[INFO   ] | 2020-08-07 11:12:27,831 | [mcc] normalize (MulticlassClassifier:217) - [SCALING] Data scaling using MinMaxScaler
[INFO   ] | 2020-08-07 11:12:27,834 | [mcc] feature_selection (MulticlassClassifier:230) - [FEATURE SELECTION] Feature selection using SelectKBest
[DEBUG  ] | 2020-08-07 11:12:28,808 | [mcc] feature_selection (MulticlassClassifier:233) - [FEATURE SELECTION] Feature index after SelectKBest: [ 1  2  3  4  5  6  7 10 11 12 13 14 15 17 19]
[DEBUG  ] | 2020-08-07 11:12:28,808 | [mcc] feature_selection (MulticlassClassifier:235) - [FEATURE SELECTION] Train shape after feature selection: (6400, 15) | (6400,)
[DEBUG  ] | 2020-08-07 11:12:28,808 | [mcc] feature_selection (MulticlassClassifier:237) - [FEATURE SELECTION] Test shape after feature selection: (1600, 15) | (1600,)
[INFO   ] | 2020-08-07 11:12:28,808 | [mcc] sample (MulticlassClassifier:268) - [SAMPLING] Data sampling using RandomOverSampler
[DEBUG  ] | 2020-08-07 11:12:28,812 | [mcc] sample (MulticlassClassifier:270) - [SAMPLING] Train shape after feature selection: (8716, 15) | (8716,)
[DEBUG  ] | 2020-08-07 11:12:28,812 | [mcc] sample (MulticlassClassifier:272) - [SAMPLING] Test shape after feature selection: (1600, 15) | (1600,)
[INFO   ] | 2020-08-07 11:12:28,812 | [mcc] train (MulticlassClassifier:280) - [TUNING] Hyper-parameters tuning of: Multi-Layer Perceptron, Support Vector Machine, Decision Tree, Random Forest, K-Nearest Neighbors, Ada Boost, Naive Bayes, K-Means
[DEBUG  ] | 2020-08-07 11:12:28,813 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Multi-Layer Perceptron
Best parameters:

{'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}

Grid scores:

0.5118 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4769 (+/-0.056) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5124 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4865 (+/-0.042) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5098 (+/-0.034) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5012 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.5007 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5093 (+/-0.038) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5122 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4837 (+/-0.049) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5134 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4910 (+/-0.043) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5099 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5043 (+/-0.025) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.5011 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5098 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5122 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4778 (+/-0.036) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5120 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4960 (+/-0.025) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5078 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5027 (+/-0.024) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4976 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5092 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5120 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4344 (+/-0.103) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5123 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4952 (+/-0.040) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5080 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5077 (+/-0.026) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4940 (+/-0.027) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5099 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5124 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4624 (+/-0.075) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5121 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.5005 (+/-0.029) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5066 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5097 (+/-0.034) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4866 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5062 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8779 (+/-0.022) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1000 (+/-0.000) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.4082 (+/-0.108) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8827 (+/-0.066) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.1736 (+/-0.107) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8715 (+/-0.031) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.1556 (+/-0.072) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5032 (+/-0.035) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8783 (+/-0.018) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1750 (+/-0.450) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.4225 (+/-0.178) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8809 (+/-0.052) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.1688 (+/-0.078) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8660 (+/-0.024) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.1421 (+/-0.089) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5059 (+/-0.032) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8746 (+/-0.022) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.3215 (+/-0.677) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.4150 (+/-0.200) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8704 (+/-0.031) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.2107 (+/-0.092) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8580 (+/-0.019) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.1283 (+/-0.076) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.4981 (+/-0.039) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8553 (+/-0.018) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.8104 (+/-0.064) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5078 (+/-0.033) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8425 (+/-0.027) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5007 (+/-0.030) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.7008 (+/-0.314) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.2581 (+/-0.105) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5013 (+/-0.038) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8530 (+/-0.012) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.8008 (+/-0.053) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5082 (+/-0.031) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8426 (+/-0.021) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5007 (+/-0.032) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8302 (+/-0.017) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.2313 (+/-0.053) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5015 (+/-0.034) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8987 (+/-0.060) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1000 (+/-0.000) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8797 (+/-0.037) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8615 (+/-0.039) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.7232 (+/-0.355) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8764 (+/-0.044) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4997 (+/-0.036) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8769 (+/-0.038) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8929 (+/-0.059) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1000 (+/-0.000) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8740 (+/-0.032) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8614 (+/-0.034) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8606 (+/-0.020) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8736 (+/-0.028) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.5017 (+/-0.030) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8736 (+/-0.025) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8801 (+/-0.050) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1000 (+/-0.000) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8787 (+/-0.029) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8622 (+/-0.037) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8584 (+/-0.022) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8732 (+/-0.022) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4958 (+/-0.030) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8643 (+/-0.021) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8625 (+/-0.020) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.7931 (+/-0.115) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8523 (+/-0.016) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8336 (+/-0.042) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5356 (+/-0.154) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8325 (+/-0.014) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4895 (+/-0.028) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5135 (+/-0.035) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8614 (+/-0.013) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.8163 (+/-0.070) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8504 (+/-0.018) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8379 (+/-0.029) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.7515 (+/-0.231) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8312 (+/-0.017) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4908 (+/-0.028) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.7317 (+/-0.221) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.9076 (+/-0.051) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4712 (+/-0.302) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8890 (+/-0.028) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8710 (+/-0.034) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8768 (+/-0.015) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8830 (+/-0.029) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.8237 (+/-0.023) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8740 (+/-0.017) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8997 (+/-0.050) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.5434 (+/-0.318) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8871 (+/-0.027) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8639 (+/-0.039) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8705 (+/-0.023) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8776 (+/-0.028) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.8276 (+/-0.028) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8762 (+/-0.015) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8809 (+/-0.037) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4787 (+/-0.312) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8797 (+/-0.017) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8568 (+/-0.028) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8690 (+/-0.019) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8684 (+/-0.020) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.8050 (+/-0.026) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8656 (+/-0.017) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8721 (+/-0.018) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.6229 (+/-0.136) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8701 (+/-0.022) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8497 (+/-0.029) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8549 (+/-0.018) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8632 (+/-0.019) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.5064 (+/-0.038) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8580 (+/-0.011) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8675 (+/-0.013) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.5347 (+/-0.173) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8655 (+/-0.018) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8524 (+/-0.031) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8502 (+/-0.023) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8597 (+/-0.022) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.5051 (+/-0.032) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8458 (+/-0.016) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}

[DEBUG  ] | 2020-08-07 12:34:49,576 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Multi-Layer Perceptron in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Multi-Layer_Perceptron.joblib
[DEBUG  ] | 2020-08-07 12:34:49,586 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Support Vector Machine
Best parameters:

{'C': 10, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}

Grid scores:

0.5375 (+/-0.036) for {'C': 0.1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.5375 (+/-0.036) for {'C': 0.1, 'decision_function_shape': 'ovr', 'kernel': 'linear'}
0.5548 (+/-0.034) for {'C': 1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.5548 (+/-0.034) for {'C': 1, 'decision_function_shape': 'ovr', 'kernel': 'linear'}
0.5578 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.5578 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovr', 'kernel': 'linear'}
0.3043 (+/-0.334) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.3043 (+/-0.334) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.3148 (+/-0.311) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.5124 (+/-0.029) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.8197 (+/-0.021) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.1779 (+/-0.117) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.1694 (+/-0.107) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1694 (+/-0.107) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.3043 (+/-0.334) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.3043 (+/-0.334) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.3148 (+/-0.311) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.5124 (+/-0.029) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.8197 (+/-0.021) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.1779 (+/-0.117) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.1694 (+/-0.107) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1694 (+/-0.107) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.3043 (+/-0.334) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.3151 (+/-0.308) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.5002 (+/-0.033) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.6072 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.8763 (+/-0.023) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.7340 (+/-0.244) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.3043 (+/-0.334) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.3151 (+/-0.308) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.5002 (+/-0.033) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.6072 (+/-0.042) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.8763 (+/-0.023) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.7340 (+/-0.244) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.3155 (+/-0.308) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.4993 (+/-0.032) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.5569 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.7275 (+/-0.030) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.8924 (+/-0.049) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.7443 (+/-0.239) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.3155 (+/-0.308) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.4993 (+/-0.032) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.5569 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.7275 (+/-0.030) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.8924 (+/-0.049) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.7443 (+/-0.239) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4807 (+/-0.026) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5383 (+/-0.037) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.5879 (+/-0.035) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.7946 (+/-0.020) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.8842 (+/-0.063) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.7443 (+/-0.239) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4807 (+/-0.026) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5383 (+/-0.037) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.5879 (+/-0.035) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.7946 (+/-0.020) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.8842 (+/-0.063) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.7443 (+/-0.239) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4993 (+/-0.032) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5485 (+/-0.038) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.6101 (+/-0.036) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.8148 (+/-0.018) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.8809 (+/-0.064) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.7443 (+/-0.239) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4993 (+/-0.032) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5485 (+/-0.038) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.6101 (+/-0.036) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.8148 (+/-0.018) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.8809 (+/-0.064) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.7443 (+/-0.239) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.6728 (+/-0.278) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.7825 (+/-0.026) for {'C': 0.1, 'decision_function_shape': 'ovo', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8373 (+/-0.011) for {'C': 0.1, 'decision_function_shape': 'ovo', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.7825 (+/-0.026) for {'C': 0.1, 'decision_function_shape': 'ovr', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8373 (+/-0.011) for {'C': 0.1, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8305 (+/-0.012) for {'C': 1, 'decision_function_shape': 'ovo', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8426 (+/-0.014) for {'C': 1, 'decision_function_shape': 'ovo', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8305 (+/-0.012) for {'C': 1, 'decision_function_shape': 'ovr', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8426 (+/-0.014) for {'C': 1, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8378 (+/-0.013) for {'C': 10, 'decision_function_shape': 'ovo', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8420 (+/-0.021) for {'C': 10, 'decision_function_shape': 'ovo', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8378 (+/-0.013) for {'C': 10, 'decision_function_shape': 'ovr', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8420 (+/-0.021) for {'C': 10, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}

[DEBUG  ] | 2020-08-07 12:44:54,354 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Support Vector Machine in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Support_Vector_Machine.joblib
[DEBUG  ] | 2020-08-07 12:44:54,356 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Decision Tree
Best parameters:

{'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}

Grid scores:

0.7388 (+/-0.117) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6614 (+/-0.115) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.6952 (+/-0.087) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5842 (+/-0.049) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6609 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5392 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7319 (+/-0.126) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6692 (+/-0.113) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.6964 (+/-0.084) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5793 (+/-0.065) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6671 (+/-0.062) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5250 (+/-0.081) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7610 (+/-0.109) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.7418 (+/-0.102) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.7308 (+/-0.087) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.6810 (+/-0.076) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6963 (+/-0.069) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.6341 (+/-0.041) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}
0.7357 (+/-0.117) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6678 (+/-0.107) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.6905 (+/-0.087) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5871 (+/-0.062) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6612 (+/-0.071) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5524 (+/-0.040) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7442 (+/-0.110) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6718 (+/-0.093) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.7001 (+/-0.087) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5867 (+/-0.044) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6607 (+/-0.066) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5435 (+/-0.049) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7660 (+/-0.110) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.7349 (+/-0.083) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.7297 (+/-0.083) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.6852 (+/-0.070) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6966 (+/-0.070) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.6358 (+/-0.043) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}
0.7282 (+/-0.119) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6669 (+/-0.089) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.6840 (+/-0.075) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5878 (+/-0.045) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6491 (+/-0.073) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5421 (+/-0.035) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7267 (+/-0.110) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6671 (+/-0.086) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.6797 (+/-0.073) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5794 (+/-0.067) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6600 (+/-0.053) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5362 (+/-0.064) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7503 (+/-0.111) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.7293 (+/-0.107) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.7141 (+/-0.073) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.6796 (+/-0.059) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6913 (+/-0.062) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.6522 (+/-0.056) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}
0.7337 (+/-0.118) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6613 (+/-0.089) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.6907 (+/-0.076) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5823 (+/-0.053) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6595 (+/-0.067) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5189 (+/-0.048) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7249 (+/-0.094) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.6699 (+/-0.091) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.6899 (+/-0.077) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.6011 (+/-0.045) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.6547 (+/-0.068) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5512 (+/-0.038) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.7539 (+/-0.110) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.7395 (+/-0.090) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.7135 (+/-0.074) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.6795 (+/-0.075) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6910 (+/-0.061) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.6345 (+/-0.050) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}

[DEBUG  ] | 2020-08-07 12:44:57,475 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Decision Tree in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Decision_Tree.joblib
[DEBUG  ] | 2020-08-07 12:44:57,477 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Random Forest
Best parameters:

{'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}

Grid scores:

0.8933 (+/-0.066) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8972 (+/-0.064) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8951 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8969 (+/-0.065) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8967 (+/-0.065) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8653 (+/-0.060) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8688 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8691 (+/-0.056) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8690 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8691 (+/-0.053) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8356 (+/-0.052) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8361 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8403 (+/-0.051) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8399 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8386 (+/-0.050) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8946 (+/-0.060) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8963 (+/-0.061) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8961 (+/-0.062) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8958 (+/-0.066) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8965 (+/-0.065) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8679 (+/-0.056) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8677 (+/-0.058) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8684 (+/-0.056) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8692 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8687 (+/-0.053) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8350 (+/-0.050) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8378 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8396 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8385 (+/-0.051) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8405 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8848 (+/-0.071) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.8856 (+/-0.075) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.8856 (+/-0.071) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.8874 (+/-0.073) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.8882 (+/-0.074) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.8556 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.8567 (+/-0.064) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.8563 (+/-0.067) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.8547 (+/-0.064) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.8561 (+/-0.067) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.8208 (+/-0.058) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.8237 (+/-0.062) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.8207 (+/-0.061) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.8248 (+/-0.060) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.8229 (+/-0.064) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}
0.8930 (+/-0.066) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8944 (+/-0.067) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8989 (+/-0.062) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8958 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8969 (+/-0.064) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8677 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8675 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8683 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8691 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8697 (+/-0.051) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8371 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8379 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8374 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8394 (+/-0.053) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8400 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8935 (+/-0.065) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8958 (+/-0.068) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8968 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8975 (+/-0.062) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8962 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8644 (+/-0.056) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8663 (+/-0.056) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8688 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8688 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8682 (+/-0.056) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8348 (+/-0.057) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8380 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8392 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8404 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8412 (+/-0.053) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8863 (+/-0.077) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.8864 (+/-0.073) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.8865 (+/-0.070) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.8868 (+/-0.075) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.8872 (+/-0.072) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.8544 (+/-0.071) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.8542 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.8571 (+/-0.068) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.8570 (+/-0.062) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.8570 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.8194 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.8226 (+/-0.063) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.8214 (+/-0.061) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.8234 (+/-0.060) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.8233 (+/-0.061) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}
0.8894 (+/-0.062) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8922 (+/-0.062) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8919 (+/-0.065) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8917 (+/-0.065) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8932 (+/-0.061) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8608 (+/-0.058) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8649 (+/-0.052) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8636 (+/-0.056) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8643 (+/-0.056) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8663 (+/-0.053) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8288 (+/-0.057) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8348 (+/-0.054) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8319 (+/-0.056) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8337 (+/-0.052) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8333 (+/-0.050) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8894 (+/-0.064) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8920 (+/-0.062) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8923 (+/-0.063) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8929 (+/-0.059) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8925 (+/-0.064) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8616 (+/-0.055) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8649 (+/-0.053) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8625 (+/-0.057) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8640 (+/-0.055) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8653 (+/-0.056) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8324 (+/-0.053) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8340 (+/-0.053) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8319 (+/-0.054) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8343 (+/-0.055) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8339 (+/-0.053) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8786 (+/-0.077) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.8813 (+/-0.076) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.8790 (+/-0.077) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.8820 (+/-0.076) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.8829 (+/-0.078) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.8498 (+/-0.070) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.8473 (+/-0.066) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.8486 (+/-0.067) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.8496 (+/-0.064) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.8487 (+/-0.066) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.8111 (+/-0.061) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.8141 (+/-0.061) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.8148 (+/-0.055) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.8143 (+/-0.061) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.8145 (+/-0.059) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}
0.8912 (+/-0.062) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8933 (+/-0.063) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8925 (+/-0.063) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8912 (+/-0.064) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8906 (+/-0.065) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8613 (+/-0.057) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8627 (+/-0.054) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8636 (+/-0.055) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8639 (+/-0.057) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8653 (+/-0.053) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8325 (+/-0.050) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8314 (+/-0.052) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8319 (+/-0.050) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8332 (+/-0.051) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8329 (+/-0.053) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8907 (+/-0.066) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.8914 (+/-0.065) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.8913 (+/-0.062) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.8925 (+/-0.063) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.8949 (+/-0.063) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.8586 (+/-0.059) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.8620 (+/-0.056) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.8625 (+/-0.053) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.8646 (+/-0.053) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.8636 (+/-0.054) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.8287 (+/-0.052) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.8313 (+/-0.054) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.8331 (+/-0.050) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.8338 (+/-0.052) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.8332 (+/-0.055) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.8790 (+/-0.078) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.8810 (+/-0.078) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.8823 (+/-0.077) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.8822 (+/-0.078) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.8838 (+/-0.074) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.8483 (+/-0.064) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.8467 (+/-0.065) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.8494 (+/-0.065) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.8504 (+/-0.064) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.8496 (+/-0.066) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.8115 (+/-0.062) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.8124 (+/-0.061) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.8161 (+/-0.060) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.8120 (+/-0.059) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.8131 (+/-0.056) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}

[DEBUG  ] | 2020-08-07 13:24:33,152 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Random Forest in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Random_Forest.joblib
[DEBUG  ] | 2020-08-07 13:24:33,277 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using K-Nearest Neighbors
Best parameters:

{'metric': 'minkowski', 'n_neighbors': 11, 'p': 3}

Grid scores:

0.8113 (+/-0.055) for {'metric': 'minkowski', 'n_neighbors': 3, 'p': 3}
0.8093 (+/-0.059) for {'metric': 'minkowski', 'n_neighbors': 3, 'p': 4}
0.8088 (+/-0.060) for {'metric': 'minkowski', 'n_neighbors': 3, 'p': 5}
0.8052 (+/-0.033) for {'metric': 'minkowski', 'n_neighbors': 5, 'p': 3}
0.8001 (+/-0.039) for {'metric': 'minkowski', 'n_neighbors': 5, 'p': 4}
0.7991 (+/-0.034) for {'metric': 'minkowski', 'n_neighbors': 5, 'p': 5}
0.8116 (+/-0.016) for {'metric': 'minkowski', 'n_neighbors': 7, 'p': 3}
0.8117 (+/-0.023) for {'metric': 'minkowski', 'n_neighbors': 7, 'p': 4}
0.8096 (+/-0.021) for {'metric': 'minkowski', 'n_neighbors': 7, 'p': 5}
0.8130 (+/-0.022) for {'metric': 'minkowski', 'n_neighbors': 11, 'p': 3}
0.8103 (+/-0.020) for {'metric': 'minkowski', 'n_neighbors': 11, 'p': 4}
0.8105 (+/-0.020) for {'metric': 'minkowski', 'n_neighbors': 11, 'p': 5}
0.8098 (+/-0.049) for {'metric': 'euclidean', 'n_neighbors': 3, 'p': 3}
0.8098 (+/-0.049) for {'metric': 'euclidean', 'n_neighbors': 3, 'p': 4}
0.8098 (+/-0.049) for {'metric': 'euclidean', 'n_neighbors': 3, 'p': 5}
0.8009 (+/-0.028) for {'metric': 'euclidean', 'n_neighbors': 5, 'p': 3}
0.8009 (+/-0.028) for {'metric': 'euclidean', 'n_neighbors': 5, 'p': 4}
0.8009 (+/-0.028) for {'metric': 'euclidean', 'n_neighbors': 5, 'p': 5}
0.8084 (+/-0.015) for {'metric': 'euclidean', 'n_neighbors': 7, 'p': 3}
0.8084 (+/-0.015) for {'metric': 'euclidean', 'n_neighbors': 7, 'p': 4}
0.8084 (+/-0.015) for {'metric': 'euclidean', 'n_neighbors': 7, 'p': 5}
0.8110 (+/-0.022) for {'metric': 'euclidean', 'n_neighbors': 11, 'p': 3}
0.8110 (+/-0.022) for {'metric': 'euclidean', 'n_neighbors': 11, 'p': 4}
0.8110 (+/-0.022) for {'metric': 'euclidean', 'n_neighbors': 11, 'p': 5}
0.8040 (+/-0.058) for {'metric': 'chebyshev', 'n_neighbors': 3, 'p': 3}
0.8040 (+/-0.058) for {'metric': 'chebyshev', 'n_neighbors': 3, 'p': 4}
0.8040 (+/-0.058) for {'metric': 'chebyshev', 'n_neighbors': 3, 'p': 5}
0.7949 (+/-0.042) for {'metric': 'chebyshev', 'n_neighbors': 5, 'p': 3}
0.7949 (+/-0.042) for {'metric': 'chebyshev', 'n_neighbors': 5, 'p': 4}
0.7949 (+/-0.042) for {'metric': 'chebyshev', 'n_neighbors': 5, 'p': 5}
0.8057 (+/-0.031) for {'metric': 'chebyshev', 'n_neighbors': 7, 'p': 3}
0.8057 (+/-0.031) for {'metric': 'chebyshev', 'n_neighbors': 7, 'p': 4}
0.8057 (+/-0.031) for {'metric': 'chebyshev', 'n_neighbors': 7, 'p': 5}
0.8050 (+/-0.016) for {'metric': 'chebyshev', 'n_neighbors': 11, 'p': 3}
0.8050 (+/-0.016) for {'metric': 'chebyshev', 'n_neighbors': 11, 'p': 4}
0.8050 (+/-0.016) for {'metric': 'chebyshev', 'n_neighbors': 11, 'p': 5}

[DEBUG  ] | 2020-08-07 13:24:44,578 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of K-Nearest Neighbors in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\K-Nearest_Neighbors.joblib
[DEBUG  ] | 2020-08-07 13:24:44,581 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Ada Boost
Best parameters:

{'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'n_estimators': 300}

Grid scores:

0.9100 (+/-0.072) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'n_estimators': 100}
0.9114 (+/-0.071) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'n_estimators': 200}
0.9138 (+/-0.070) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'n_estimators': 300}
0.9032 (+/-0.072) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'n_estimators': 100}
0.9098 (+/-0.066) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'n_estimators': 200}
0.9119 (+/-0.065) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'n_estimators': 300}
0.9079 (+/-0.072) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'n_estimators': 100}
0.9126 (+/-0.070) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'n_estimators': 200}
0.9108 (+/-0.071) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'n_estimators': 300}
0.9041 (+/-0.074) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'n_estimators': 100}
0.9103 (+/-0.070) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'n_estimators': 200}
0.9098 (+/-0.072) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'n_estimators': 300}

[DEBUG  ] | 2020-08-07 13:25:56,993 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Ada Boost in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Ada_Boost.joblib
[DEBUG  ] | 2020-08-07 13:25:57,123 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Naive Bayes
Best parameters:

{'priors': None, 'var_smoothing': 1e-08}

Grid scores:

0.5262 (+/-0.029) for {'priors': None, 'var_smoothing': 1e-08}
0.5262 (+/-0.029) for {'priors': None, 'var_smoothing': 1e-05}
0.5258 (+/-0.029) for {'priors': None, 'var_smoothing': 0.01}
0.4841 (+/-0.026) for {'priors': None, 'var_smoothing': 1.0}
0.5262 (+/-0.029) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 1e-08}
0.5262 (+/-0.029) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 1e-05}
0.5258 (+/-0.029) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 0.01}
0.4842 (+/-0.026) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 1.0}

[DEBUG  ] | 2020-08-07 13:25:57,338 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Naive Bayes in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Naive_Bayes.joblib
[DEBUG  ] | 2020-08-07 13:25:57,339 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using K-Means
[DEBUG  ] | 2020-08-07 13:25:57,541 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of K-Means in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\K-Means.joblib
[INFO   ] | 2020-08-07 13:25:57,542 | [mcc] evaluate (MulticlassClassifier:341) - [EVAL] Computing evaluation for: Multi-Layer Perceptron, Support Vector Machine, Decision Tree, Random Forest, K-Nearest Neighbors, Ada Boost, Naive Bayes, K-Means
[INFO   ] | 2020-08-07 13:25:57,597 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Multi-Layer Perceptron:
	- Accuracy: 0.83125
	- Precision: 0.8208575460987538
	- Recall: 0.8169728974878885
	- F1-score: 0.8185559852150792
	- Confusion matrix: 
[[451  22  24  18]
 [ 27 190  27  21]
 [ 20  13 278  27]
 [ 28  21  22 411]]
[INFO   ] | 2020-08-07 13:25:58,476 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Support Vector Machine:
	- Accuracy: 0.806875
	- Precision: 0.7996638940155916
	- Recall: 0.7859199228562112
	- F1-score: 0.7914999313133438
	- Confusion matrix: 
[[451  15  22  27]
 [ 39 177  27  22]
 [ 36  17 254  31]
 [ 30  21  22 409]]
[INFO   ] | 2020-08-07 13:25:58,483 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Decision Tree:
	- Accuracy: 0.631875
	- Precision: 0.6197015869057105
	- Recall: 0.6176914763739512
	- F1-score: 0.6173704839245447
	- Confusion matrix: 
[[373  53  42  47]
 [ 46 149  30  40]
 [ 66  32 192  48]
 [ 86  50  49 297]]
[INFO   ] | 2020-08-07 13:25:58,919 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Random Forest:
	- Accuracy: 0.82625
	- Precision: 0.8288021165962575
	- Recall: 0.8063592169593209
	- F1-score: 0.8147884987163465
	- Confusion matrix: 
[[464  14  15  22]
 [ 30 181  23  31]
 [ 32   7 268  31]
 [ 39  11  23 409]]
[INFO   ] | 2020-08-07 13:26:07,370 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of K-Nearest Neighbors:
	- Accuracy: 0.82
	- Precision: 0.8063173173299412
	- Recall: 0.8117251965957608
	- F1-score: 0.8086903268608164
	- Confusion matrix: 
[[443  27  24  21]
 [ 21 199  22  23]
 [ 16  16 278  28]
 [ 23  34  33 392]]
[INFO   ] | 2020-08-07 13:26:08,227 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Ada Boost:
	- Accuracy: 0.82
	- Precision: 0.8373660698005715
	- Recall: 0.7893185131775732
	- F1-score: 0.8039535910809786
	- Confusion matrix: 
[[472   6   9  28]
 [ 40 161  22  42]
 [ 42   6 254  36]
 [ 38   6  13 425]]
[INFO   ] | 2020-08-07 13:26:08,233 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Naive Bayes:
	- Accuracy: 0.565625
	- Precision: 0.5543268157494627
	- Recall: 0.5565277088660554
	- F1-score: 0.5521234462809717
	- Confusion matrix: 
[[306  60  75  74]
 [ 56 137  23  49]
 [ 26  68 177  67]
 [ 54  89  54 285]]
[INFO   ] | 2020-08-07 13:26:08,246 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of K-Means:
	- Accuracy: 0.14125
	- Precision: 0.14276690055779
	- Recall: 0.1498266909129386
	- F1-score: 0.14059963705148062
	- Confusion matrix: 
[[ 41 164  91 219]
 [ 86  42  82  55]
 [ 78  99  73  88]
 [ 71 156 185  70]]
[INFO   ] | 2020-08-07 13:26:08,246 | [mcc] on_success (MulticlassClassifier:361) - Successfully trained all specified classifiers
