[INFO   ] | 2020-08-06 23:04:07,323 | [root] start (Client:63) - v0.3.7
[DEBUG  ] | 2020-08-06 23:04:07,323 | [root] start (Client:64) - 
### Configuration - from Conf: 
	{ version : 0.3.7 }
	{ app_name : MulticlassClassifier }
	{ tmp : /Volumes/Ramdisk/ }
	{ debug : True }
	{ dataset.train : C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\dataset\training_set.csv }
	{ dataset.test_ratio : 0.2 }
	{ rng.seed : 43531 }
	{ pair_plot.compute : False }
	{ pair_plot.save : False }
	{ jobs : 12 }
	{ classifier.dump : True }
	{ benchmark.best_found : (0.8444, 'Multi-Layer Perceptron') }
	{ benchmark.threshold : (0.8906, '04/09/2020') }
	{ dataset.test :  }
[INFO   ] | 2020-08-06 23:04:07,323 | [root] start (Client:67) - [BENCHMARK] Current best value found for Multi-Layer Perceptron classifier, with F1-score: 0.8444.
[INFO   ] | 2020-08-06 23:04:07,323 | [root] start (Client:71) - [BENCHMARK] Current threshold with F1-score: 0.8906 (deadline on 04/09/2020).
[DEBUG  ] | 2020-08-06 23:04:07,360 | [mcc] prepare (MulticlassClassifier:86) - [LIB VERSION] numpy : 1.19.1
[DEBUG  ] | 2020-08-06 23:04:07,360 | [mcc] prepare (MulticlassClassifier:87) - [LIB VERSION] pandas : 1.1.0
[DEBUG  ] | 2020-08-06 23:04:07,360 | [mcc] prepare (MulticlassClassifier:88) - [LIB VERSION] matplotlib : 3.3.0
[DEBUG  ] | 2020-08-06 23:04:07,360 | [mcc] prepare (MulticlassClassifier:89) - [LIB VERSION] sklearn : 0.23.1
[DEBUG  ] | 2020-08-06 23:04:07,360 | [mcc] prepare (MulticlassClassifier:90) - [LIB VERSION] imblearn : 0.7.0
[DEBUG  ] | 2020-08-06 23:04:07,360 | [mcc] prepare (MulticlassClassifier:91) - [LIB VERSION] scipy : 1.5.2
[INFO   ] | 2020-08-06 23:04:07,360 | [mcc] prepare (MulticlassClassifier:94) - [MODE] Finding best classifier on data set (MulticlassClassifier)
[DEBUG  ] | 2020-08-06 23:04:07,412 | [mcc] prepare (MulticlassClassifier:97) - [DESCRIPTION] Dataset description:
                F1           F2  ...          F20        CLASS
count  7994.000000  7994.000000  ...  7997.000000  8000.000000
mean     -0.013077    -0.261413  ...    -0.355555     1.463375
std       1.006235     1.852793  ...     1.794666     1.231198
min      -4.181155    -6.980290  ...    -7.563245     0.000000
25%      -0.698506    -1.441144  ...    -1.563262     0.000000
50%      -0.028194    -0.261095  ...    -0.373514     2.000000
75%       0.666096     0.944857  ...     0.825741     3.000000
max       3.774161     7.155359  ...     6.774458     3.000000

[8 rows x 21 columns]
[DEBUG  ] | 2020-08-06 23:04:07,412 | [mcc] prepare (MulticlassClassifier:105) - [DESCRIPTION] Class percentage in dataset :
	C1: 33.67 %
	C2: 15.99 %
	C3: 20.66 %
	C4: 29.68 %
[INFO   ] | 2020-08-06 23:04:07,412 | [mcc] split (MulticlassClassifier:132) - [DATA SPLIT] Splitting dataset into training and test set with ratio: 0.2
[INFO   ] | 2020-08-06 23:04:07,415 | [mcc] manage_bad_values (MulticlassClassifier:155) - [MISSING DATA] Managing missing data
[DEBUG  ] | 2020-08-06 23:04:07,416 | [mcc] manage_bad_values (MulticlassClassifier:157) - [MISSING DATA] Training set x before processing (shape: (6400, 20)):
F1     5
F2     5
F3     1
F4     0
F5     3
F6     5
F7     4
F8     9
F9     4
F10    4
F11    4
F12    4
F13    3
F14    8
F15    2
F16    6
F17    4
F18    6
F19    5
F20    2
dtype: int64
[DEBUG  ] | 2020-08-06 23:04:07,417 | [mcc] manage_bad_values (MulticlassClassifier:161) - [MISSING DATA] Test set x before processing (shape: (1600, 20)):
F1     1
F2     1
F3     0
F4     1
F5     1
F6     1
F7     0
F8     0
F9     2
F10    2
F11    1
F12    2
F13    0
F14    2
F15    0
F16    0
F17    0
F18    1
F19    0
F20    1
dtype: int64
[DEBUG  ] | 2020-08-06 23:04:07,427 | [mcc] manage_bad_values (MulticlassClassifier:175) - [MISSING DATA] Training set x after processing (shape: (6400, 20)):
F1     0
F2     0
F3     0
F4     0
F5     0
F6     0
F7     0
F8     0
F9     0
F10    0
F11    0
F12    0
F13    0
F14    0
F15    0
F16    0
F17    0
F18    0
F19    0
F20    0
dtype: int64
[DEBUG  ] | 2020-08-06 23:04:07,427 | [mcc] manage_bad_values (MulticlassClassifier:179) - [MISSING DATA] Test set x after processing (shape: (1600, 20)):
F1     0
F2     0
F3     0
F4     0
F5     0
F6     0
F7     0
F8     0
F9     0
F10    0
F11    0
F12    0
F13    0
F14    0
F15    0
F16    0
F17    0
F18    0
F19    0
F20    0
dtype: int64
[INFO   ] | 2020-08-06 23:04:07,427 | [mcc] manage_bad_values (MulticlassClassifier:189) - [OUTLIER] Managing outliers using modified z-score method
[DEBUG  ] | 2020-08-06 23:04:07,466 | [mcc] manage_bad_values (MulticlassClassifier:191) - [DESCRIPTION] Training set x description before manage outlier:
                F1           F2  ...          F19          F20
count  6400.000000  6400.000000  ...  6400.000000  6400.000000
mean     -0.016422    -0.272141  ...     0.002108    -0.349239
std       1.007336     1.856364  ...     0.997279     1.794146
min      -4.181155    -6.980290  ...    -3.854103    -7.563245
25%      -0.706740    -1.446657  ...    -0.664509    -1.552750
50%      -0.030842    -0.265420  ...    -0.010748    -0.359182
75%       0.664343     0.918865  ...     0.672995     0.828487
max       3.774161     7.155359  ...     3.606960     6.774458

[8 rows x 20 columns]
[DEBUG  ] | 2020-08-06 23:04:07,764 | [mcc] manage_bad_values (MulticlassClassifier:203) - [DESCRIPTION] Training set x description after manage outlier:
                F1           F2  ...          F19          F20
count  6400.000000  6400.000000  ...  6400.000000  6400.000000
mean     -0.017525    -0.271383  ...     0.002736    -0.350192
std       1.002755     1.835655  ...     0.991934     1.776129
min      -3.508639    -6.343826  ...    -3.229380    -5.999590
25%      -0.706491    -1.442337  ...    -0.662566    -1.548472
50%      -0.030842    -0.265420  ...    -0.010748    -0.359182
75%       0.659591     0.916347  ...     0.670954     0.824141
max       3.471496     5.835273  ...     3.291693     5.623552

[8 rows x 20 columns]
[INFO   ] | 2020-08-06 23:04:07,764 | [mcc] normalize (MulticlassClassifier:217) - [SCALING] Data scaling using MinMaxScaler
[INFO   ] | 2020-08-06 23:04:07,767 | [mcc] feature_selection (MulticlassClassifier:230) - [FEATURE SELECTION] Feature selection using SelectKBest
[DEBUG  ] | 2020-08-06 23:04:08,663 | [mcc] feature_selection (MulticlassClassifier:233) - [FEATURE SELECTION] Feature index after SelectKBest: [ 1  2  3  4  5  6  7 10 11 12 13 14 15 17 19]
[DEBUG  ] | 2020-08-06 23:04:08,663 | [mcc] feature_selection (MulticlassClassifier:235) - [FEATURE SELECTION] Train shape after feature selection: (6400, 15) | (6400,)
[DEBUG  ] | 2020-08-06 23:04:08,663 | [mcc] feature_selection (MulticlassClassifier:237) - [FEATURE SELECTION] Test shape after feature selection: (1600, 15) | (1600,)
[INFO   ] | 2020-08-06 23:04:08,663 | [mcc] sample (MulticlassClassifier:268) - [SAMPLING] Data sampling using RandomUnderSampler
[DEBUG  ] | 2020-08-06 23:04:08,666 | [mcc] sample (MulticlassClassifier:270) - [SAMPLING] Train shape after feature selection: (4056, 15) | (4056,)
[DEBUG  ] | 2020-08-06 23:04:08,666 | [mcc] sample (MulticlassClassifier:272) - [SAMPLING] Test shape after feature selection: (1600, 15) | (1600,)
[INFO   ] | 2020-08-06 23:04:08,666 | [mcc] train (MulticlassClassifier:280) - [TUNING] Hyper-parameters tuning of: Multi-Layer Perceptron, Support Vector Machine, Decision Tree, Random Forest, K-Nearest Neighbors, Ada Boost, Naive Bayes, K-Means
[DEBUG  ] | 2020-08-06 23:04:08,666 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Multi-Layer Perceptron
Best parameters:

{'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}

Grid scores:

0.5119 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4787 (+/-0.087) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5112 (+/-0.030) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4844 (+/-0.042) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5057 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5051 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4915 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5108 (+/-0.031) for {'activation': 'identity', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5114 (+/-0.030) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4883 (+/-0.039) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5119 (+/-0.031) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4895 (+/-0.045) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5087 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.4982 (+/-0.045) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4949 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5121 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5123 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4805 (+/-0.042) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5129 (+/-0.031) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4981 (+/-0.036) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5077 (+/-0.035) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5100 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4911 (+/-0.036) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5095 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5116 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4606 (+/-0.090) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5107 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.5041 (+/-0.033) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5055 (+/-0.030) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5046 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4669 (+/-0.028) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5074 (+/-0.032) for {'activation': 'identity', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.5109 (+/-0.031) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4676 (+/-0.051) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5099 (+/-0.030) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.4975 (+/-0.043) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5019 (+/-0.036) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5062 (+/-0.028) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4711 (+/-0.041) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5064 (+/-0.030) for {'activation': 'identity', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.7879 (+/-0.286) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.0998 (+/-0.001) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.1885 (+/-0.132) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8169 (+/-0.061) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.1534 (+/-0.088) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5612 (+/-0.245) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.1210 (+/-0.053) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.4719 (+/-0.148) for {'activation': 'logistic', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8497 (+/-0.042) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1001 (+/-0.001) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.2659 (+/-0.149) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8401 (+/-0.037) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.1388 (+/-0.074) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.7568 (+/-0.263) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.1204 (+/-0.059) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.4960 (+/-0.037) for {'activation': 'logistic', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8563 (+/-0.027) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4552 (+/-0.711) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.1768 (+/-0.109) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8468 (+/-0.041) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.1792 (+/-0.078) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8280 (+/-0.051) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.1235 (+/-0.063) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.2219 (+/-0.168) for {'activation': 'logistic', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.6393 (+/-0.319) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.6486 (+/-0.551) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5049 (+/-0.029) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8319 (+/-0.028) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.4085 (+/-0.183) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.5389 (+/-0.174) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.2079 (+/-0.086) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.4981 (+/-0.037) for {'activation': 'logistic', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.7712 (+/-0.266) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.7660 (+/-0.048) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.5063 (+/-0.032) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8212 (+/-0.045) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.3102 (+/-0.124) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.7380 (+/-0.232) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.1766 (+/-0.088) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.4965 (+/-0.030) for {'activation': 'logistic', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.7862 (+/-0.052) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1000 (+/-0.001) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8534 (+/-0.040) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8311 (+/-0.049) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5117 (+/-0.033) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.7875 (+/-0.051) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4901 (+/-0.038) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.7256 (+/-0.324) for {'activation': 'tanh', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.7802 (+/-0.053) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1001 (+/-0.001) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8564 (+/-0.035) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8340 (+/-0.043) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5870 (+/-0.274) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8440 (+/-0.055) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4934 (+/-0.036) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8634 (+/-0.034) for {'activation': 'tanh', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8258 (+/-0.033) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.1000 (+/-0.001) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8644 (+/-0.037) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8544 (+/-0.043) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8382 (+/-0.044) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8539 (+/-0.028) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4902 (+/-0.029) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8534 (+/-0.031) for {'activation': 'tanh', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8491 (+/-0.034) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.7977 (+/-0.063) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8351 (+/-0.036) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8101 (+/-0.036) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5074 (+/-0.035) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.7404 (+/-0.229) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4630 (+/-0.044) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5088 (+/-0.030) for {'activation': 'tanh', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8444 (+/-0.026) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.7822 (+/-0.062) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8269 (+/-0.028) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8080 (+/-0.062) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.5388 (+/-0.164) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8028 (+/-0.033) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4548 (+/-0.045) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.5099 (+/-0.034) for {'activation': 'tanh', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8070 (+/-0.037) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4822 (+/-0.297) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8711 (+/-0.026) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8242 (+/-0.032) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8629 (+/-0.035) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8576 (+/-0.030) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.5445 (+/-0.172) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8628 (+/-0.037) for {'activation': 'relu', 'hidden_layer_sizes': (150, 100), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.7948 (+/-0.039) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.5052 (+/-0.338) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8673 (+/-0.034) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8382 (+/-0.041) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8617 (+/-0.034) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8593 (+/-0.040) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.5168 (+/-0.044) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8587 (+/-0.027) for {'activation': 'relu', 'hidden_layer_sizes': (120, 60), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8333 (+/-0.025) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.3330 (+/-0.320) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8651 (+/-0.034) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8445 (+/-0.039) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8519 (+/-0.037) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8621 (+/-0.023) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4184 (+/-0.226) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8507 (+/-0.029) for {'activation': 'relu', 'hidden_layer_sizes': (60, 30), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8679 (+/-0.025) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4865 (+/-0.221) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8585 (+/-0.035) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8466 (+/-0.043) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8304 (+/-0.054) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8595 (+/-0.030) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.4060 (+/-0.073) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8431 (+/-0.030) for {'activation': 'relu', 'hidden_layer_sizes': (75,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}
0.8596 (+/-0.035) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'sgd'}
0.4215 (+/-0.302) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.1, 'solver': 'adam'}
0.8515 (+/-0.037) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'sgd'}
0.8458 (+/-0.030) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.01, 'solver': 'adam'}
0.8260 (+/-0.045) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'sgd'}
0.8564 (+/-0.033) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.001, 'solver': 'adam'}
0.3857 (+/-0.101) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'sgd'}
0.8279 (+/-0.030) for {'activation': 'relu', 'hidden_layer_sizes': (45,), 'learning_rate': 'adaptive', 'learning_rate_init': 0.0001, 'solver': 'adam'}

[DEBUG  ] | 2020-08-06 23:39:18,192 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Multi-Layer Perceptron in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Multi-Layer_Perceptron.joblib
[DEBUG  ] | 2020-08-06 23:39:18,200 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Support Vector Machine
Best parameters:

{'C': 1, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}

Grid scores:

0.5201 (+/-0.024) for {'C': 0.1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.5201 (+/-0.024) for {'C': 0.1, 'decision_function_shape': 'ovr', 'kernel': 'linear'}
0.5548 (+/-0.028) for {'C': 1, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.5548 (+/-0.028) for {'C': 1, 'decision_function_shape': 'ovr', 'kernel': 'linear'}
0.5627 (+/-0.029) for {'C': 10, 'decision_function_shape': 'ovo', 'kernel': 'linear'}
0.5627 (+/-0.029) for {'C': 10, 'decision_function_shape': 'ovr', 'kernel': 'linear'}
0.2694 (+/-0.116) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.2695 (+/-0.117) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.2698 (+/-0.116) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.4844 (+/-0.038) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.7600 (+/-0.022) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.1600 (+/-0.063) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.1011 (+/-0.007) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.3180 (+/-0.171) for {'C': 0.1, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.2694 (+/-0.116) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.2695 (+/-0.117) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.2698 (+/-0.116) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.4844 (+/-0.038) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.7600 (+/-0.022) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.1600 (+/-0.063) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.1011 (+/-0.007) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.3180 (+/-0.171) for {'C': 0.1, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.2694 (+/-0.116) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.2695 (+/-0.117) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.4792 (+/-0.039) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.5790 (+/-0.029) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.8373 (+/-0.033) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.5419 (+/-0.048) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.1066 (+/-0.014) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1317 (+/-0.123) for {'C': 1, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.2694 (+/-0.116) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.2695 (+/-0.117) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.4792 (+/-0.039) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.5790 (+/-0.029) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.8373 (+/-0.033) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.5419 (+/-0.048) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.1066 (+/-0.014) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1317 (+/-0.123) for {'C': 1, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.2694 (+/-0.116) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.4783 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.5382 (+/-0.028) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.6906 (+/-0.050) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.7822 (+/-0.031) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.5585 (+/-0.044) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.1105 (+/-0.015) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1322 (+/-0.123) for {'C': 10, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.2694 (+/-0.116) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.4783 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.5382 (+/-0.028) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.6906 (+/-0.050) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.7822 (+/-0.031) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.5585 (+/-0.044) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.1105 (+/-0.015) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1322 (+/-0.123) for {'C': 10, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4516 (+/-0.033) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5213 (+/-0.023) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.5763 (+/-0.029) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.7693 (+/-0.034) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.7620 (+/-0.037) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.5585 (+/-0.044) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.1105 (+/-0.015) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1322 (+/-0.123) for {'C': 50, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4516 (+/-0.033) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5213 (+/-0.023) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.5763 (+/-0.029) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.7693 (+/-0.034) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.7620 (+/-0.037) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.5585 (+/-0.044) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.1105 (+/-0.015) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1322 (+/-0.123) for {'C': 50, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4785 (+/-0.038) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5336 (+/-0.025) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.001, 'kernel': 'rbf'}
0.5921 (+/-0.028) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.01, 'kernel': 'rbf'}
0.7914 (+/-0.022) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 0.1, 'kernel': 'rbf'}
0.7601 (+/-0.041) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 10.0, 'kernel': 'rbf'}
0.5585 (+/-0.044) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 100.0, 'kernel': 'rbf'}
0.1105 (+/-0.015) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1322 (+/-0.123) for {'C': 100, 'decision_function_shape': 'ovo', 'gamma': 10000.0, 'kernel': 'rbf'}
0.4785 (+/-0.038) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.0001, 'kernel': 'rbf'}
0.5336 (+/-0.025) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.001, 'kernel': 'rbf'}
0.5921 (+/-0.028) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.01, 'kernel': 'rbf'}
0.7914 (+/-0.022) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 0.1, 'kernel': 'rbf'}
0.7601 (+/-0.041) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 10.0, 'kernel': 'rbf'}
0.5585 (+/-0.044) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 100.0, 'kernel': 'rbf'}
0.1105 (+/-0.015) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 1000.0, 'kernel': 'rbf'}
0.1322 (+/-0.123) for {'C': 100, 'decision_function_shape': 'ovr', 'gamma': 10000.0, 'kernel': 'rbf'}
0.7529 (+/-0.036) for {'C': 0.1, 'decision_function_shape': 'ovo', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8244 (+/-0.036) for {'C': 0.1, 'decision_function_shape': 'ovo', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.7529 (+/-0.036) for {'C': 0.1, 'decision_function_shape': 'ovr', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8244 (+/-0.036) for {'C': 0.1, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8141 (+/-0.030) for {'C': 1, 'decision_function_shape': 'ovo', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8316 (+/-0.035) for {'C': 1, 'decision_function_shape': 'ovo', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8141 (+/-0.030) for {'C': 1, 'decision_function_shape': 'ovr', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8316 (+/-0.035) for {'C': 1, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8304 (+/-0.029) for {'C': 10, 'decision_function_shape': 'ovo', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8163 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovo', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}
0.8304 (+/-0.029) for {'C': 10, 'decision_function_shape': 'ovr', 'degree': 2, 'gamma': 'scale', 'kernel': 'poly'}
0.8163 (+/-0.038) for {'C': 10, 'decision_function_shape': 'ovr', 'degree': 3, 'gamma': 'scale', 'kernel': 'poly'}

[DEBUG  ] | 2020-08-06 23:41:34,274 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Support Vector Machine in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Support_Vector_Machine.joblib
[DEBUG  ] | 2020-08-06 23:41:34,276 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Decision Tree
Best parameters:

{'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}

Grid scores:

0.5441 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.5107 (+/-0.045) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5538 (+/-0.044) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5189 (+/-0.064) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5606 (+/-0.064) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.4800 (+/-0.077) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5544 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.5079 (+/-0.048) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5763 (+/-0.032) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5165 (+/-0.038) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5747 (+/-0.052) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5040 (+/-0.074) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5865 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.5667 (+/-0.045) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.5958 (+/-0.049) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.5846 (+/-0.044) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6101 (+/-0.040) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.5647 (+/-0.032) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}
0.5525 (+/-0.038) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.4983 (+/-0.067) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5571 (+/-0.040) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5167 (+/-0.070) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5677 (+/-0.048) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.4675 (+/-0.053) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5463 (+/-0.052) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.5130 (+/-0.055) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5775 (+/-0.032) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5035 (+/-0.054) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5670 (+/-0.032) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.4729 (+/-0.075) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5912 (+/-0.047) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.5619 (+/-0.065) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.5956 (+/-0.046) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.5726 (+/-0.042) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6100 (+/-0.040) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.5684 (+/-0.061) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}
0.5428 (+/-0.026) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.5151 (+/-0.056) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5775 (+/-0.066) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5133 (+/-0.063) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5534 (+/-0.077) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.4745 (+/-0.051) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5519 (+/-0.049) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.5098 (+/-0.046) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5665 (+/-0.039) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5190 (+/-0.046) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5714 (+/-0.032) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.5079 (+/-0.082) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5747 (+/-0.044) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.5508 (+/-0.041) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.5980 (+/-0.037) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.5875 (+/-0.042) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6141 (+/-0.035) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.5655 (+/-0.052) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}
0.5397 (+/-0.037) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'best'}
0.5080 (+/-0.036) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5612 (+/-0.042) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5169 (+/-0.051) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5651 (+/-0.049) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'best'}
0.4738 (+/-0.040) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5415 (+/-0.053) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'best'}
0.5034 (+/-0.058) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'splitter': 'random'}
0.5638 (+/-0.047) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'best'}
0.5197 (+/-0.050) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'splitter': 'random'}
0.5725 (+/-0.044) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'best'}
0.4838 (+/-0.056) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'splitter': 'random'}
0.5800 (+/-0.035) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'best'}
0.5671 (+/-0.045) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'splitter': 'random'}
0.5993 (+/-0.045) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'best'}
0.5673 (+/-0.068) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'splitter': 'random'}
0.6142 (+/-0.033) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'best'}
0.5675 (+/-0.043) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'splitter': 'random'}

[DEBUG  ] | 2020-08-06 23:41:35,874 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Decision Tree in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Decision_Tree.joblib
[DEBUG  ] | 2020-08-06 23:41:35,875 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Random Forest
Best parameters:

{'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}

Grid scores:

0.7727 (+/-0.043) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7840 (+/-0.032) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7862 (+/-0.032) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7841 (+/-0.029) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7838 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7673 (+/-0.041) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7772 (+/-0.030) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7721 (+/-0.030) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7746 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7739 (+/-0.030) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7588 (+/-0.038) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7558 (+/-0.035) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7583 (+/-0.038) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7628 (+/-0.026) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7611 (+/-0.034) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7833 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7833 (+/-0.023) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7869 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7837 (+/-0.029) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7820 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7674 (+/-0.034) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7714 (+/-0.029) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7726 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7751 (+/-0.031) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7737 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7518 (+/-0.042) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7550 (+/-0.029) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7586 (+/-0.031) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7591 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7589 (+/-0.026) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7694 (+/-0.046) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.7772 (+/-0.043) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.7775 (+/-0.036) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.7755 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.7778 (+/-0.035) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.7649 (+/-0.034) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.7668 (+/-0.042) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.7675 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.7702 (+/-0.040) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.7660 (+/-0.038) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.7402 (+/-0.048) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.7431 (+/-0.047) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.7470 (+/-0.047) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.7424 (+/-0.041) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.7434 (+/-0.043) for {'criterion': 'entropy', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}
0.7810 (+/-0.041) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7830 (+/-0.031) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7847 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7850 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7871 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7707 (+/-0.031) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7733 (+/-0.027) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7750 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7751 (+/-0.024) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7776 (+/-0.027) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7535 (+/-0.031) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7596 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7624 (+/-0.029) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7571 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7611 (+/-0.026) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7811 (+/-0.022) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7865 (+/-0.024) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7862 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7865 (+/-0.029) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7866 (+/-0.023) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7707 (+/-0.033) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7727 (+/-0.030) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7771 (+/-0.025) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7740 (+/-0.030) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7759 (+/-0.031) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7510 (+/-0.030) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7586 (+/-0.031) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7611 (+/-0.028) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7618 (+/-0.030) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7571 (+/-0.032) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7747 (+/-0.042) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.7792 (+/-0.041) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.7762 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.7774 (+/-0.035) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.7739 (+/-0.039) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.7641 (+/-0.039) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.7657 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.7653 (+/-0.039) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.7667 (+/-0.041) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.7637 (+/-0.036) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.7434 (+/-0.043) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.7449 (+/-0.037) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.7480 (+/-0.040) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.7433 (+/-0.038) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.7443 (+/-0.047) for {'criterion': 'entropy', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}
0.7789 (+/-0.037) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7817 (+/-0.032) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7854 (+/-0.026) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7812 (+/-0.030) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7809 (+/-0.035) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7650 (+/-0.040) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7649 (+/-0.023) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7704 (+/-0.032) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7721 (+/-0.029) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7682 (+/-0.027) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7536 (+/-0.027) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7562 (+/-0.034) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7546 (+/-0.037) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7541 (+/-0.037) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7532 (+/-0.039) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7780 (+/-0.030) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7776 (+/-0.033) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7823 (+/-0.026) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7821 (+/-0.033) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7799 (+/-0.026) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7668 (+/-0.027) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7697 (+/-0.030) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7685 (+/-0.027) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7710 (+/-0.029) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7692 (+/-0.030) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7538 (+/-0.032) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7555 (+/-0.042) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7512 (+/-0.032) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7554 (+/-0.032) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7524 (+/-0.027) for {'criterion': 'gini', 'max_depth': 80, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7672 (+/-0.039) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.7700 (+/-0.040) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.7735 (+/-0.038) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.7770 (+/-0.043) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.7752 (+/-0.039) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.7611 (+/-0.043) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.7611 (+/-0.044) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.7616 (+/-0.040) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.7616 (+/-0.041) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.7624 (+/-0.042) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.7380 (+/-0.042) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.7387 (+/-0.040) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.7375 (+/-0.041) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.7372 (+/-0.040) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.7436 (+/-0.048) for {'criterion': 'gini', 'max_depth': 80, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}
0.7761 (+/-0.039) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7819 (+/-0.031) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7831 (+/-0.026) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7846 (+/-0.031) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7856 (+/-0.032) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7650 (+/-0.019) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7704 (+/-0.028) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7669 (+/-0.032) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7705 (+/-0.036) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7709 (+/-0.031) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7466 (+/-0.033) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7528 (+/-0.041) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7514 (+/-0.032) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7529 (+/-0.028) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7532 (+/-0.034) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'log2', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7768 (+/-0.032) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 100}
0.7804 (+/-0.031) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 200}
0.7765 (+/-0.029) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 300}
0.7806 (+/-0.027) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 400}
0.7846 (+/-0.026) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'n_estimators': 500}
0.7682 (+/-0.035) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 100}
0.7675 (+/-0.029) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 200}
0.7725 (+/-0.031) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 300}
0.7692 (+/-0.020) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 400}
0.7707 (+/-0.027) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 5, 'n_estimators': 500}
0.7472 (+/-0.033) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 100}
0.7536 (+/-0.044) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 200}
0.7512 (+/-0.028) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 300}
0.7550 (+/-0.032) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 400}
0.7528 (+/-0.035) for {'criterion': 'gini', 'max_depth': 90, 'max_features': 'sqrt', 'min_samples_leaf': 10, 'n_estimators': 500}
0.7711 (+/-0.047) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 100}
0.7717 (+/-0.036) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 200}
0.7735 (+/-0.044) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 300}
0.7774 (+/-0.039) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 400}
0.7722 (+/-0.038) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 2, 'n_estimators': 500}
0.7598 (+/-0.033) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 100}
0.7583 (+/-0.049) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 200}
0.7619 (+/-0.036) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 300}
0.7633 (+/-0.033) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 400}
0.7606 (+/-0.042) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 5, 'n_estimators': 500}
0.7373 (+/-0.040) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 100}
0.7376 (+/-0.047) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 200}
0.7393 (+/-0.039) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 300}
0.7397 (+/-0.038) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 400}
0.7383 (+/-0.049) for {'criterion': 'gini', 'max_depth': 90, 'max_features': None, 'min_samples_leaf': 10, 'n_estimators': 500}

[DEBUG  ] | 2020-08-06 23:59:32,923 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Random Forest in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Random_Forest.joblib
[DEBUG  ] | 2020-08-06 23:59:33,111 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using K-Nearest Neighbors
Best parameters:

{'metric': 'minkowski', 'n_neighbors': 11, 'p': 3}

Grid scores:

0.7694 (+/-0.030) for {'metric': 'minkowski', 'n_neighbors': 3, 'p': 3}
0.7669 (+/-0.023) for {'metric': 'minkowski', 'n_neighbors': 3, 'p': 4}
0.7645 (+/-0.027) for {'metric': 'minkowski', 'n_neighbors': 3, 'p': 5}
0.7828 (+/-0.040) for {'metric': 'minkowski', 'n_neighbors': 5, 'p': 3}
0.7864 (+/-0.031) for {'metric': 'minkowski', 'n_neighbors': 5, 'p': 4}
0.7862 (+/-0.024) for {'metric': 'minkowski', 'n_neighbors': 5, 'p': 5}
0.7949 (+/-0.036) for {'metric': 'minkowski', 'n_neighbors': 7, 'p': 3}
0.7951 (+/-0.032) for {'metric': 'minkowski', 'n_neighbors': 7, 'p': 4}
0.7939 (+/-0.030) for {'metric': 'minkowski', 'n_neighbors': 7, 'p': 5}
0.8033 (+/-0.037) for {'metric': 'minkowski', 'n_neighbors': 11, 'p': 3}
0.8022 (+/-0.038) for {'metric': 'minkowski', 'n_neighbors': 11, 'p': 4}
0.8013 (+/-0.033) for {'metric': 'minkowski', 'n_neighbors': 11, 'p': 5}
0.7640 (+/-0.036) for {'metric': 'euclidean', 'n_neighbors': 3, 'p': 3}
0.7640 (+/-0.036) for {'metric': 'euclidean', 'n_neighbors': 3, 'p': 4}
0.7640 (+/-0.036) for {'metric': 'euclidean', 'n_neighbors': 3, 'p': 5}
0.7827 (+/-0.039) for {'metric': 'euclidean', 'n_neighbors': 5, 'p': 3}
0.7827 (+/-0.039) for {'metric': 'euclidean', 'n_neighbors': 5, 'p': 4}
0.7827 (+/-0.039) for {'metric': 'euclidean', 'n_neighbors': 5, 'p': 5}
0.7905 (+/-0.034) for {'metric': 'euclidean', 'n_neighbors': 7, 'p': 3}
0.7905 (+/-0.034) for {'metric': 'euclidean', 'n_neighbors': 7, 'p': 4}
0.7905 (+/-0.034) for {'metric': 'euclidean', 'n_neighbors': 7, 'p': 5}
0.8024 (+/-0.036) for {'metric': 'euclidean', 'n_neighbors': 11, 'p': 3}
0.8024 (+/-0.036) for {'metric': 'euclidean', 'n_neighbors': 11, 'p': 4}
0.8024 (+/-0.036) for {'metric': 'euclidean', 'n_neighbors': 11, 'p': 5}
0.7518 (+/-0.028) for {'metric': 'chebyshev', 'n_neighbors': 3, 'p': 3}
0.7518 (+/-0.028) for {'metric': 'chebyshev', 'n_neighbors': 3, 'p': 4}
0.7518 (+/-0.028) for {'metric': 'chebyshev', 'n_neighbors': 3, 'p': 5}
0.7715 (+/-0.035) for {'metric': 'chebyshev', 'n_neighbors': 5, 'p': 3}
0.7715 (+/-0.035) for {'metric': 'chebyshev', 'n_neighbors': 5, 'p': 4}
0.7715 (+/-0.035) for {'metric': 'chebyshev', 'n_neighbors': 5, 'p': 5}
0.7852 (+/-0.021) for {'metric': 'chebyshev', 'n_neighbors': 7, 'p': 3}
0.7852 (+/-0.021) for {'metric': 'chebyshev', 'n_neighbors': 7, 'p': 4}
0.7852 (+/-0.021) for {'metric': 'chebyshev', 'n_neighbors': 7, 'p': 5}
0.7956 (+/-0.026) for {'metric': 'chebyshev', 'n_neighbors': 11, 'p': 3}
0.7956 (+/-0.026) for {'metric': 'chebyshev', 'n_neighbors': 11, 'p': 4}
0.7956 (+/-0.026) for {'metric': 'chebyshev', 'n_neighbors': 11, 'p': 5}

[DEBUG  ] | 2020-08-06 23:59:37,740 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of K-Nearest Neighbors in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\K-Nearest_Neighbors.joblib
[DEBUG  ] | 2020-08-06 23:59:37,748 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Ada Boost
Best parameters:

{'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'n_estimators': 300}

Grid scores:

0.7906 (+/-0.029) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'n_estimators': 100}
0.7965 (+/-0.038) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'n_estimators': 200}
0.7966 (+/-0.035) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'best', 'n_estimators': 300}
0.7706 (+/-0.028) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'n_estimators': 100}
0.7907 (+/-0.042) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'n_estimators': 200}
0.7953 (+/-0.032) for {'base_estimator__criterion': 'gini', 'base_estimator__splitter': 'random', 'n_estimators': 300}
0.7869 (+/-0.031) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'n_estimators': 100}
0.7963 (+/-0.024) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'n_estimators': 200}
0.7990 (+/-0.034) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'best', 'n_estimators': 300}
0.7734 (+/-0.028) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'n_estimators': 100}
0.7825 (+/-0.037) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'n_estimators': 200}
0.7944 (+/-0.039) for {'base_estimator__criterion': 'entropy', 'base_estimator__splitter': 'random', 'n_estimators': 300}

[DEBUG  ] | 2020-08-07 00:00:15,018 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Ada Boost in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Ada_Boost.joblib
[DEBUG  ] | 2020-08-07 00:00:15,138 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using Naive Bayes
Best parameters:

{'priors': None, 'var_smoothing': 0.01}

Grid scores:

0.5322 (+/-0.042) for {'priors': None, 'var_smoothing': 1e-08}
0.5322 (+/-0.042) for {'priors': None, 'var_smoothing': 1e-05}
0.5324 (+/-0.041) for {'priors': None, 'var_smoothing': 0.01}
0.4879 (+/-0.045) for {'priors': None, 'var_smoothing': 1.0}
0.5322 (+/-0.042) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 1e-08}
0.5322 (+/-0.042) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 1e-05}
0.5324 (+/-0.041) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 0.01}
0.4881 (+/-0.045) for {'priors': [0.25, 0.25, 0.25, 0.25], 'var_smoothing': 1.0}

[DEBUG  ] | 2020-08-07 00:00:15,283 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of Naive Bayes in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\Naive_Bayes.joblib
[DEBUG  ] | 2020-08-07 00:00:15,285 | [mcc] train (MulticlassClassifier:292) - [TUNING] Hyper-parameter tuning using K-Means
[DEBUG  ] | 2020-08-07 00:00:15,447 | [mcc] train (MulticlassClassifier:334) - [TUNING] Dump of K-Means in C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\classifier\K-Means.joblib
[INFO   ] | 2020-08-07 00:00:15,448 | [mcc] evaluate (MulticlassClassifier:341) - [EVAL] Computing evaluation for: Multi-Layer Perceptron, Support Vector Machine, Decision Tree, Random Forest, K-Nearest Neighbors, Ada Boost, Naive Bayes, K-Means
[INFO   ] | 2020-08-07 00:00:15,506 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Multi-Layer Perceptron:
	- Accuracy: 0.89125
	- Precision: 0.8865572648184847
	- Recall: 0.8827331293657791
	- F1-score: 0.8844914196939774
	- Confusion matrix: 
[[468  20  15  12]
 [ 17 218  17  13]
 [ 16   5 299  18]
 [ 20   9  12 441]]
[INFO   ] | 2020-08-07 00:00:16,011 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Support Vector Machine:
	- Accuracy: 0.858125
	- Precision: 0.8499596217937424
	- Recall: 0.8491028740938114
	- F1-score: 0.849372224333614
	- Confusion matrix: 
[[459  20  18  18]
 [ 17 207  22  19]
 [ 19   8 291  20]
 [ 25  21  20 416]]
[INFO   ] | 2020-08-07 00:00:16,018 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Decision Tree:
	- Accuracy: 0.6125
	- Precision: 0.5982176395431036
	- Recall: 0.6034412076712683
	- F1-score: 0.6001238635965574
	- Confusion matrix: 
[[340  64  38  73]
 [ 39 145  40  41]
 [ 41  40 203  54]
 [ 73  52  65 292]]
[INFO   ] | 2020-08-07 00:00:16,761 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Random Forest:
	- Accuracy: 0.815
	- Precision: 0.8056126763065817
	- Recall: 0.807032959817493
	- F1-score: 0.8060924387088406
	- Confusion matrix: 
[[445  26  19  25]
 [ 22 201  24  18]
 [ 24  14 272  28]
 [ 37  25  34 386]]
[INFO   ] | 2020-08-07 00:00:22,788 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of K-Nearest Neighbors:
	- Accuracy: 0.831875
	- Precision: 0.8239875197333411
	- Recall: 0.8223481397563478
	- F1-score: 0.8228321643952429
	- Confusion matrix: 
[[447  21  20  27]
 [ 23 198  23  21]
 [ 17   9 284  28]
 [ 27  22  31 402]]
[INFO   ] | 2020-08-07 00:00:23,709 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Ada Boost:
	- Accuracy: 0.826875
	- Precision: 0.8204820889009329
	- Recall: 0.8183668626639813
	- F1-score: 0.8193625198103441
	- Confusion matrix: 
[[446  24  18  27]
 [ 20 203  20  22]
 [ 26   9 275  28]
 [ 35  23  25 399]]
[INFO   ] | 2020-08-07 00:00:23,716 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of Naive Bayes:
	- Accuracy: 0.555
	- Precision: 0.5434516335226773
	- Recall: 0.5473617784642072
	- F1-score: 0.5426155562565851
	- Confusion matrix: 
[[293  64  84  74]
 [ 56 131  26  52]
 [ 24  59 185  70]
 [ 61  83  59 279]]
[INFO   ] | 2020-08-07 00:00:23,727 | [mcc] evaluate (MulticlassClassifier:349) - [EVAL] Evaluation of K-Means:
	- Accuracy: 0.29875
	- Precision: 0.3003140923671256
	- Recall: 0.2937840695871326
	- F1-score: 0.2871244899518071
	- Confusion matrix: 
[[222 126 140  27]
 [ 53  78  45  89]
 [ 92  81  91  74]
 [ 73 154 168  87]]
[INFO   ] | 2020-08-07 00:00:23,727 | [mcc] on_success (MulticlassClassifier:361) - Successfully trained all specified classifiers
