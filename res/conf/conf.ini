# [LEGEND]
#   [opt] := optional parameter
#   [dft] := default value
#   [mnd] := mandatory parameter

[GENERAL]
# [opt] - Directory for temporary files.
# [dft] - /tmp
# tmp = /Volumes/Ramdisk/

# [opt] - Set verbose level to debug.
# [dft] - False
debug = True


[TRAINING]
# [mnd] - Dataset for training purpose (fully qualified path name).
# dataset.train = /ABS_PATH_TRAINING_SET.csv
dataset.train = /Volumes/Data/Projects/Python/MulticlassClassifier/res/dataset/training_set.csv
# dataset.train = C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\dataset\training_set.csv

# [opt] - Set test ratio from dataset.
# [dft] - 0.2
# dataset.test_ratio = 0.3

# [opt] - Seed for RNG.
# [dft] - 0
# rng.seed = 43531
# rng.seed = 2873587

# [opt] - Compute pair-plot.
# [dft] - False
# pair_plot.compute = True

# [opt] - Save pair-plot on file (will be used folder set with tmp option, see GENERAL section).
# [dft] - False
# pair_plot.save = True

# [opt] - Max number of jobs to use during training.
# [dft] - -1
jobs = 24

# [opt] - Create dump file for best classifiers.
# [dft] - False
#   If this option is set to True:
#     - if it has been specified dataset.test (section MOBD) option with fully qualified path of test set (for MOBD project evaluation)
#       then, will be loaded classifiers dump from folder ./res/classifier/*.joblib and all classifiers will be evaluated
#       on test set file, after dataset preprocessing, using various metrics;
#     - if it has not been specified dataset.test option, then all classifiers will be trained with dataset specified in
#       dataset.train option (section TRAINING), after dataset preprocessing, a dump of bests classifiers will be saved
#       under ./res/classifier/*.joblib folder and bests classifiers will be evaluated on test set created from
#       training set, using various metrics.
#   Otherwise:
#     - if it has been specified dataset.test (section MOBD) option with fully qualified path of test set (for MOBD project evaluation)
#       then, all classifiers will be trained, after dataset preprocessing, using file specified with option
#       dataset.train (section TRAINING) and, bests classifiers will be evaluated on test set file, using various metrics;
#     - if it has not been specified dataset.test option, then all classifiers will be trained, after dataset preprocessing,
#       with dataset specified in dataset.train option and will be evaluated on test set created from training set, using various metrics.
classifier.dump = True


[MOBD]
# [opt] - Best benchmark computed for F1-score metric.
# [dft] - (0.0 - '')
benchmark.best_found = (0.8973, 'Multi-Layer Perceptron')

# [opt] - Current benchmark threshold evaluation and deadline (time format: dd/mm/yyyy).
# [dft] - (0.0 - datetime.today())
benchmark.threshold = (0.8906, '04/09/2020')

# [opt] - Dataset for project evaluation (fully qualified path name).
# [dft] - ''
#   If you specify option dataset.test, this tool will perform evaluation on specified test set file once launched,
#     so no further actions are needed.
#
#   If tool shutdown without message error, probably the format of test set file is wrong.
#   By default this tool manages test file without index column (so, saved with command
#     pandas.data_frame.to_csv('/abs_path', index=False); see ./res/dataset/test_set_no_index.csv for example file).
#   If you want to input test set file with index column (saved with command
#     pandas.data_frame.to_csv('/abs_path', index=True); see ./res/dataset/test_set_index.csv for example file)
#     just go to Evaluator.__init__() and change line self.__test = Set(pd.read_csv(self.conf.dataset_test)) to
#     self.__test = Set(pd.read_csv(self.conf.dataset_test, index_col=0)).
#   If you want to input test set file without index column and without header row (does not have F1-20 and CLASS row;
#     see ./res/dataset/test_set_no_index_features.csv for example file), just go to Evaluator.__init__() and change
#     line self.__test = Set(pd.read_csv(self.conf.dataset_test)) to
#     self.__test = Set(pd.read_csv(self.conf.dataset_test, header=None,
#                                   names=[f"F{i}" for i in range(1, 21)] + ["CLASS"]))
# dataset.test = /ABS_PATH_TEST_SET.csv
# dataset.test = /Volumes/Data/Projects/Python/MulticlassClassifier/res/dataset/test_set_no_index.csv
# dataset.test = /Volumes/Data/Projects/Python/MulticlassClassifier/res/dataset/test_set_index.csv
# dataset.test = /Volumes/Data/Projects/Python/MulticlassClassifier/res/dataset/test_set_no_index_features.csv
# dataset.test = C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\dataset\test_set_no_index.csv
# dataset.test = C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\dataset\test_set_index.csv
# dataset.test = C:\Users\Mauro\PycharmProjects\MulticlassClassifier\res\dataset\test_set_no_index_features.csv
